#!/bin/bash

cat >parse.py <<.
import csv

kernels = ["MoveAndMark", "ComputeCurrent", "ShiftParticles", "FieldBackgroundE", "FieldBackgroundB"]
time_units = {'ks': 1e3, 's': 1.0, 'ms': 1e-3, 'us': 1e-6, 'ns': 1e-9}
units = 1e-6

def show_stats(fname):
    ans = dict((k,0.0) for k in kernels)

    lines = []
    with open(fname, encoding='utf-8') as f:
        for line in f: # NVIDIA mixes text with its csv output...
            if line[:2] == '==': continue
            if line[:2] == 'No': continue
            if line[:2] == ',%': # NVIDIA units line, e.g. ,%,s,,s,s,s,
                units = time_units[line.split(',')[2]]
                continue
            lines.append(line)

    reader = csv.DictReader(lines, delimiter=',', quotechar='"')
    # nvidia: "Type","Time(%)","Time","Calls","Avg","Min","Max","Name"
    #     units = us
    # amd: "Name","Calls","TotalDurationNs","AverageNs","Percentage"
    #     units = ns
    for row in reader:
        name = row['Name'] # symbol
        #calls = row['Calls']
        try:
            total = float(row['TotalDurationNs'])*1e-9
        except KeyError:
            total = float(row['Time'])*units
        #avg = row['AverageNs']
        #pct = row['Percentage']
        for k in kernels:
            if name.find(k) != -1:
                ans[k] += total
                break

    for k in kernels:
        print(f"{ans[k]:.3f}")

if __name__=="__main__":
    import sys
    argv = sys.argv
    assert len(argv) == 2, f"Usage: {argv[0]} <stats.csv>"
    show_stats(argv[1])
.

# not complete
[ -e stderr ] || exit 99
[ -e stdout ] || exit 99

if grep -q 'COMPLETE' stdout; then
    # capture extra information about the result
    awk '/time:.*sec/ {print $(NF-1)}' stdout >result.txt
    awk '/^[^#0]/ {if(NF == 3) {lines += 1; n += $2;}} END {print n/lines}' \
            e_macroParticlesCount.dat >>result.txt
    if [ -f hip_0.stats.csv ]; then
        python3 parse.py hip_0.stats.csv >>result.txt
    else
        if [ -f profile.csv ]; then
            python3 parse.py profile.csv >>result.txt
        else
            for((i=1;i<=5;i++)); do
                echo "0" >>result.txt
            done
        fi
    fi
    exit 0
fi

# exit with error
grep -q 'Exited' stderr && exit 1
grep -q 'aborted:' stderr && exit 2
grep -q 'error:' stderr && exit 3

exit 99
